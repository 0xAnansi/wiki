{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home of Anansi's web of tutorials","text":"<p>This is my new sandbox.</p> <p>Under construction.</p>"},{"location":"Tutorials/Deleting%20your%20reddit%20history/","title":"How to delete your reddit history","text":""},{"location":"Tutorials/Deleting%20your%20reddit%20history/#introduction","title":"Introduction","text":"<p>The following tutorial aims at making you able to delete your Reddit history, partially or entirely, while bypassing the Reddit's API limiting the removal at only the last 1000 messages that you made.</p>"},{"location":"Tutorials/Deleting%20your%20reddit%20history/#why","title":"Why?","text":"<p>Reddit's business is based on using the data that you freely submit to it, to resell them to data aggregators and advertisers.</p> <p>It is merely good digital hygiene to remove data that you spread to the internet as much as possible, but it is also good, even better, as a protest mean against the API changes announced by Reddit, than a subreddit blackout.</p> <p>While a subreddit blackout can negatively impact Reddit's image, it's only temporary, and the mods that trigger the blackouts can be removed and replaced on a whim.</p> <p>This is not the case for your data, and the data that build these subreddits. </p> <p>Removing your data removes what Reddit can sell out to third parties, and lower the data that Reddit has to manages through its APIs, lowering their technical costs.</p> <p>It's a win/win scenario! !&gt;/s&lt;!</p>"},{"location":"Tutorials/Deleting%20your%20reddit%20history/#will-this-kill-my-karma","title":"Will this kill my karma?","text":"<p>No. The karma stays.</p>"},{"location":"Tutorials/Deleting%20your%20reddit%20history/#is-it-irreversible","title":"Is it irreversible?","text":"<p>Yes and no. </p> <p>This will remove your comments, and removed comments cannot be restored (afaik).</p> <p>You will still be in possession of your comment archive though, which makes you able to repost every single comment through automated means in each threads it was deleted from, but you might be limited by thread archiving, and available tools to do so.</p> <p>So TL;DR, your data won't be lost, but won't be easily publishable.</p>"},{"location":"Tutorials/Deleting%20your%20reddit%20history/#requesting-your-data-from-reddit","title":"Requesting your data from Reddit","text":"<p>The first step in removing your data, is actually getting it all from Reddit. You can achieve this by making a request at the following page, while logged-in as the user you want the data of: Request your reddit data</p> <p>You need to pick \"General Data Protection Regulation (GDPR)\" in the type of request to get the most exhaustive one.</p> <p>For the range of data, select \"I want data from my full time at Reddit\".</p> <p>This is done asynchronously and you will need to check your Reddit messages until you receive the download link.</p> <p>Note that it can only done once per 30 days.</p>"},{"location":"Tutorials/Deleting%20your%20reddit%20history/#using-your-data-dump-to-remove-your-history","title":"Using your data dump to remove your history","text":"<p>Once you got your data archive from Reddit, you'll be in the possession of the full list of messages that you ever wrote, far beyond the 1000 entries that you could have fetched through the API.</p> <p>From there, you can either build a tool that will delete the comment from the API based on the ID of each of the comments in the dump, or use a tool that has already made it easy.</p> <p>For my own use, I use the tool called Redact, available on their website</p> <p>Disclaimer: I am not affiliated with redact nor do I receive anything from them for advertising their tool.</p> <p>Note that Redact is free, but is not open-source, so use at your own risks. </p> <p>Why Redact? </p> <p>Because it has the useful feature of being able to take the archive sent by Reddit directly as input to clear your Reddit account. It's also available on all the existing OS that I can think of, so no matter if you want to do it by phone, from windows, mac or Linux, a client is available.</p>"},{"location":"Tutorials/Deleting%20your%20reddit%20history/#setting-up-the-reddit-removal-service","title":"Setting up the Reddit removal service","text":"<p>Pick the Reddit service and click on \"Add account\". This will bring the login page where you need to log-in to the account you want to delete data from.</p> <p></p> <p>Once logged-in, you will need to authorize Redact to access your data through your account:</p> <p></p> <p>And that's it!</p>"},{"location":"Tutorials/Deleting%20your%20reddit%20history/#configuring-the-removal-of-your-data","title":"Configuring the removal of your data","text":"<p>You have a lot of option concerning the time period you want your data deleted.</p> <p></p> <p>For this use, I would advise using \"Relative Date\", from \"All time\" to \"3 months ago\". This will remove your historical data while keeping your most recent activity you're most likely to be replied to.</p> <p>In the \"Comments\" section, you will notice this option:</p> <p></p> <p>This is where you put the archive that you got from Reddit. This will make Redact non-reliant on the Reddit's API to fetch comments, and bypass the 1000 comments limit that the API returns.</p> <p>You have then a plethora of options to better configure what you want to delete, but here, we're mostly interested in wiping everything.</p> <p></p> <p>In the section \"Action to take\", pick \"Edit comments\". This will edit with garbage text, which is supposed to make the original comment unrecoverable (this might not be true, but this is why it's there so better try)</p> <p>Note that if you want to actually remove your comments, you'll need to re-run this a second time and select \"Delete\".</p> <p></p> <p>In \"Custom Edit Text\" you can enter what you want your comment to be replaced with if random text is not to your liking.</p> <p>You can use any of the community approved ones such as, but not limited to:</p> <ul> <li> <p>Fuck Spez</p> </li> <li> <p>Due to the changes in the API limitations and access, this comment has been removed from reddit</p> </li> <li> <p>Removed for privacy</p> </li> <li> <p>Deez nutz</p> </li> <li> <p>Etc.</p> </li> </ul> <p></p> <p>You can also specify karma upper and lower limit to delete, but for this, we'll delete everything.</p> <p></p> <p>You can also select your comments through wordlist, but once again, this is not our case.</p> <p></p> <p>We are now done with the configuration.</p> <p>We can either check if this is right by running a \"Preview Mode\" run, or yoloing and directly delete everything.</p> <p></p> <p>Then, start the process.</p>"},{"location":"Tutorials/Deleting%20your%20reddit%20history/#starting-the-deletion","title":"Starting the deletion","text":"<p>And accept that Redact will not be responsible if you deleted the secret nuclear launch codes that you transferred from your toilets to a comment on Reddit.</p> <p></p> <p>This will now run for as long as needed to remove everything.</p>"},{"location":"Tutorials/Deleting%20your%20reddit%20history/#tldr","title":"TL;DR","text":"<p>Get your data archive from https://www.reddit.com/settings/data-request</p> <p>Put it in https://redact.dev/</p> <p>Configure and launch deletion</p> <p>???</p> <p>~~Fuck Spez~~ </p> <p>Profit</p> <p>This tutorial is also available on my github pages, in case of removal</p>"},{"location":"Tutorials/Hosting%20a%20python%20bot%20on%20a%20VPS/","title":"Hosting a python bot on a VPS","text":""},{"location":"Tutorials/Hosting%20a%20python%20bot%20on%20a%20VPS/#prerequisites","title":"Prerequisites","text":"<p>To be able to follow this tutorial, you will need:</p> <ul> <li>A hosting provider (VPS, dedicated server, raspi in your local network, etc.)</li> <li>Remote access to a host</li> <li>Root access to a host</li> <li>A script to run</li> <li>To be able to connect to the host, you will need a SSH client. For Linux and Mac, it's native. For Windows, there are several alternatives, the most popular being https://putty.org/. A good solution, for ease of use, is to use a terminal manager such as https://mremoteng.org/ (open source).</li> <li>A SFTP client, optional, if your code is not in a git repo (https://filezilla-project.org/download.php?type=clientis crossplatform for example)</li> </ul> <p>In the following tutorial, the following variables will be used:</p> <ul> <li>[root_user] : the root user initially provided by your hosting provider</li> <li>[sudo_account] : the user you created following the tutorial</li> <li>[server_ip] : the IP of your server</li> </ul>"},{"location":"Tutorials/Hosting%20a%20python%20bot%20on%20a%20VPS/#notes","title":"Notes","text":"<p>This tutorial will consider that the host is provided with a debian or debian based distribution.</p>"},{"location":"Tutorials/Hosting%20a%20python%20bot%20on%20a%20VPS/#a-few-linux-commands-helps-and-references","title":"A few Linux commands, helps and references","text":"<p>A QWERTY layout:</p> <p></p> Reference Description . Current directory .. Previous directory ~ Home directory (/home/[your_current_user]) ^ Ctrl key (^X is ctrl+x for example) M or Meta Alt key (M-U is Alt+U for example) <code>$</code> The beginning of a command line Command Description Example cd Change directory <code>cd ~/scripts</code> ls -l List content of directory as list <code>ls -l .</code> cat Display the whole content of a file <code>cat ./main.py</code> tail -n 250 Display the last 250 lines of a file (useful to check logs) <code>tail -n 250 ./output.log</code> nano Edit a file <code>nano ./main.py</code> nohup Run a command without needing a shell <code>nohup ./main.py</code>"},{"location":"Tutorials/Hosting%20a%20python%20bot%20on%20a%20VPS/#preparing-the-host","title":"Preparing the host","text":""},{"location":"Tutorials/Hosting%20a%20python%20bot%20on%20a%20VPS/#connect-to-the-host-with-the-provided-account","title":"Connect to the host with the provided account","text":""},{"location":"Tutorials/Hosting%20a%20python%20bot%20on%20a%20VPS/#windows","title":"Windows","text":"<p>TBD, but do the same thing as below using your client of choice pretty much</p>"},{"location":"Tutorials/Hosting%20a%20python%20bot%20on%20a%20VPS/#linux-mac","title":"Linux &amp; Mac","text":"<p>Open a terminal and type the following command:</p> <pre><code>$ ssh [root_user]@[server_ip]\n</code></pre> <p>This should ask for your password, that you will have to enter, or paste (be careful, ctrl+v is not often supported in terminals. You might have to use the middle click, or right click)</p> <p></p> <p>If everything goes right, you will be greeted by what is called a banner. Below that, you'll have access to your server's shell (which might not look like the screenshot, but the idea is there)</p> <p></p>"},{"location":"Tutorials/Hosting%20a%20python%20bot%20on%20a%20VPS/#update-the-host","title":"Update the host","text":"<p>Before anything, we'll ensure that the host is up to date.</p> <pre><code>$ apt update &amp;&amp; apt upgrade\n</code></pre> <p>An example of an output:</p> <pre><code>$ apt update &amp;&amp; apt upgrade\nHit:1 http://download.draios.com/stable/deb stable-amd64/ InRelease\nHit:2 http://mirrors.linode.com/debian bullseye InRelease\nGet:3 http://mirrors.linode.com/debian-security bullseye-security/updates InRelease [48.4 kB]\nGet:4 http://mirrors.linode.com/debian bullseye-updates InRelease [44.1 kB]\nGet:5 http://mirrors.linode.com/debian-security bullseye-security/updates/main Sources [190 kB]\nGet:6 http://mirrors.linode.com/debian-security bullseye-security/updates/main amd64 Packages [239 kB]\nFetched 521 kB in 4s (138 kB/s)\nReading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\nAll packages are up to date.\nReading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\nCalculating upgrade... Done\nThe following packages were automatically installed and are no longer required:\n    apache2-bin apache2-data apache2-utils bind9utils bsdmainutils cpp-8 dh-python g++-6 gconf-service gconf2-common imagemagick-6-common libaom0 libapr1 libaprutil1 libaprutil1-dbd-sqlite3 libaprutil1-ldap libasan5 libb64-0d libbabeltrace-ctf1 libbind9-140 libbind9-161\n    libblas-common libboost-filesystem1.62.0 libboost-iostreams1.62.0 libboost-iostreams1.67.0 libboost-system1.62.0 libboost-system1.67.0 libcroco3 libcwidget3v5 libdav1d4 libdbus-glib-1-2 libde265-0 libdns-export1104 libdns1104 libdns1110 libdns162 libegl-mesa0 libegl1\n    libegl1-mesa libevent-2.1-6 libfftw3-double3 libgbm1 libgconf-2-4 libgdk-pixbuf-xlib-2.0-0 libgdk-pixbuf2.0-0 libgfortran3 libgfortran5 libheif1 libicu57 libicu63 libirs141 libirs161 libisc-export1100 libisc1100 libisc1105 libisc160 libisccc140 libisccc161 libisccfg140\n    libisccfg163 libisl19 libjemalloc1 libjq1 libjson-c3 libjsoncpp1 liblinear3 libllvm7 liblockfile-bin liblockfile1 liblqr-1-0 libltdl7 liblua5.2-0 libluajit-5.1-2 libluajit-5.1-common liblvm2app2.2 liblvm2cmd2.02 liblwres141 liblwres161 libmagickcore-6.q16-3\n    libmagickcore-6.q16-6 libmagickwand-6.q16-3 libmagickwand-6.q16-6 libmpdec2 libonig4 libonig5 libopenjp2-7 libperl5.28 libprocps7 libpython2-dev libpython2-stdlib libpython2.7 libpython2.7-dev libpython2.7-minimal libpython2.7-stdlib libpython3.5 libpython3.5-dev\n    libpython3.5-minimal libpython3.5-stdlib libpython3.7 libpython3.7-dev libpython3.7-minimal libpython3.7-stdlib libreadline5 libruby2.3 libruby2.5 libstdc++-6-dev libtinfo-dev libunbound2 libwayland-egl1-mesa libwayland-server0 libwebpdemux2 libwebpmux3 libx265-165 libx265-192\n    linux-headers-4.19.0-16-common linux-headers-4.19.0-17-common linux-headers-4.19.0-21-common linux-headers-4.19.0-22-common linux-headers-4.19.0-6-common linux-headers-4.9.0-11-amd64 linux-headers-4.9.0-11-common linux-headers-4.9.0-8-amd64 linux-headers-4.9.0-8-common\n    linux-headers-5.10.0-19-amd64 linux-headers-5.10.0-19-common linux-image-4.19.0-16-amd64 linux-image-4.19.0-17-amd64 linux-image-4.19.0-21-amd64 linux-image-4.19.0-22-amd64 linux-image-4.19.0-6-amd64 linux-image-4.9.0-11-amd64 linux-image-4.9.0-8-amd64\n    linux-image-5.10.0-19-amd64 linux-kbuild-4.19 netcat-traditional perl-modules-5.28 php-common python-pkg-resources python2 python2-dev python2-minimal python2.7 python2.7-dev python2.7-minimal python3.5 python3.5-dev python3.5-minimal python3.7-minimal ruby-did-you-mean ruby2.3\n    x11proto-input-dev x11proto-kb-dev\nUse 'sudo apt autoremove' to remove them.\n0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.\n</code></pre>"},{"location":"Tutorials/Hosting%20a%20python%20bot%20on%20a%20VPS/#create-a-less-privileged-user","title":"Create a less privileged user","text":"<p>Since connecting using a root account is a very bad practice, we will be creating a user account that you will use for the rest of the tutorial.</p> <p>Run the following command to create a new user:</p> <pre><code>$ adduser [sudo_user]\n</code></pre> <p>This should ask you for a password, be aware that this will most likely be using QWERTY layout. Set up a password with at least 12 characters, using a mix of uppercase, lowercase, special characters and number. I would highly advise that you use a password manager both to save and to generate your passwords.</p> <pre><code>$ adduser [sudo_user]\nAdding user '[sudo_user]' ...\nAdding new group '[sudo_user]' (1001) ...\nAdding new user '[sudo_user]' (1001) with group '[sudo_user]' ...\nCreating home directory '/home/[sudo_user]' ...\nCopying files from '/etc/skel' ...\nEnter new UNIX password: ******\nRetype new UNIX password: ******\n</code></pre> <p>If you want to change the password for the user afterwards, you can use the following command:</p> <pre><code>$ passwd [sudo_user]\nEnter new UNIX password: ******\nRetype new UNIX password: ******\n</code></pre> <p>While we want the user to be less privileged by default, we still want to be able to run privileged commands on demand, so we need to add this user to the group 'sudo'.</p> <pre><code>$ usermod -aG sudo [sudo_user]\n</code></pre> <p>This should be enough to allow ssh connections.</p>"},{"location":"Tutorials/Hosting%20a%20python%20bot%20on%20a%20VPS/#testing-the-new-account","title":"Testing the new account","text":"<p>Repeat the chapter #Connect to the host with the provided account using the new account information.</p> <p>If everything is ok, disconnect from the previous ssh session that is using [root_user] by typing in the console:</p> <pre><code>$ exit\n</code></pre>"},{"location":"Tutorials/Hosting%20a%20python%20bot%20on%20a%20VPS/#install-the-software","title":"Install the software","text":""},{"location":"Tutorials/Hosting%20a%20python%20bot%20on%20a%20VPS/#install-the-python-environment-manager","title":"Install the python environment manager","text":"<p>Because python is a clusterfuck and to avoid bricking the system, we will be using a virtual environment manager for python, that will make you able to have a dedicated version of python for each script that you use. </p> <p>That avoids conflicts, and makes everything smoother in the long run.</p> <p>Start by installing the prerequisites:</p> <pre><code>$ sudo apt-get install -y make build-essential libssl-dev zlib1g-dev \\\nlibbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev \\\nlibncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl\n</code></pre> <p>Then install pyenv itself:</p> <pre><code>$ curl https://pyenv.run | bash\n</code></pre> <p>At the end of the install, you should see something like:</p> <pre><code>WARNING: seems you still have not added 'pyenv' to the load path.\n\nLoad pyenv automatically by adding\nthe following to ~/.bashrc:\n\nexport PATH=\"$HOME/.pyenv/bin:$PATH\"\neval \"$(pyenv init -)\"\neval \"$(pyenv virtualenv-init -)\"\n</code></pre> <p>Run the following commands to add pyenv to your path, as the warning above asks you to do:</p> <pre><code>$ echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' &gt;&gt; ~/.bashrc\n$ echo 'command -v pyenv &gt;/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' &gt;&gt; ~/.bashrc\n$ echo 'eval \"$(pyenv init -)\"' &gt;&gt; ~/.bashrc\n$ echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' &gt;&gt; ~/.profile\n$ echo 'command -v pyenv &gt;/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' &gt;&gt; ~/.profile\n$ echo 'eval \"$(pyenv init -)\"' &gt;&gt; ~/.profile\n$ echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' &gt;&gt; ~/.bash_profile\n$ echo 'command -v pyenv &gt;/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' &gt;&gt; ~/.bash_profile\n$ echo 'eval \"$(pyenv init -)\"' &gt;&gt; ~/.bash_profile\n$ exec \"$SHELL\"\n</code></pre> <p>Update pyenv by running:</p> <pre><code>$ pyenv update\n</code></pre> <p>Create the working directory where you'll upload your scripts:</p> <pre><code>$ mkdir ~/scripts\n</code></pre>"},{"location":"Tutorials/Hosting%20a%20python%20bot%20on%20a%20VPS/#install-a-script","title":"Install a script","text":""},{"location":"Tutorials/Hosting%20a%20python%20bot%20on%20a%20VPS/#transfer-your-script-to-the-host","title":"Transfer your script to the host","text":"<p>If you're using a git repository, I will consider that you know how to clone a repo. This part is for people that have the code on their computer and need to transfer it to the host.</p> <p>For this, you will need to use your SFTP client, setup as follow:</p> <ul> <li>Host: sftp://[server_ip]</li> <li>Username: [sudo_user]</li> <li>Password: [sudo_user_password]</li> <li>Port: 22</li> </ul> <p>If something asks you if you trust this host, say yes.</p> <p>If you use Filezilla, it'll look something like:</p> <p></p> <p>On the left side, you'll see your computer's content, on the right side, you'll see the server.</p> <p>Transfer your scripts into separate folders on the server, in the /home/[sudo_user]/scripts/MyBot directory that was created earlier (you can drag and drop).</p>"},{"location":"Tutorials/Hosting%20a%20python%20bot%20on%20a%20VPS/#setting-up-a-script","title":"Setting up a script","text":""},{"location":"Tutorials/Hosting%20a%20python%20bot%20on%20a%20VPS/#setting-up-the-virtual-environment","title":"Setting up the virtual environment","text":"<p>For better comprehension, the following part will consider that your script is in the /home/user/scripts/MyBot directory, and has a starting point in the file main.py</p> <p>Enter the working directory:</p> <pre><code>$ cd /home/[sudo_user]/scripts/MyBot\n</code></pre> <p>Install a local python environment (you can change the version if you need a specific one, I'll use the latest stable at the time of writting this tutorial):</p> <pre><code>$ pyenv install 3.11.3\n$ pyenv virtualenv 3.11.3 venv_MyBot # replace the MyBot name by the name of your script/bot\n</code></pre> <p>Then, activate the virtual env</p> <pre><code>$ pyenv activate venv_MyBot # replace the MyBot name by the name of your script/bot \n</code></pre> <p>You should see something like (venv_MyBot) preceding your shell, which mean that you're using the newly created virtual environment.</p> <p>For example, on my specific shell (which is customized), it looks like:</p> <p></p>"},{"location":"Tutorials/Hosting%20a%20python%20bot%20on%20a%20VPS/#setting-up-the-actual-script","title":"Setting up the actual script","text":"<p>Now, you should be able to run your script! (maybe)</p> <p>Run the following command:</p> <pre><code>(venv_MyBot) $ python3 ./main.py\n</code></pre> <p>If there is no error, nice, it's almost done and you can skip the rest of this specific chapter. If not, you'll most likely be missing some dependencies, with a message looking like:</p> <pre><code>ModuleNotFoundError: No module named 'schedule'\n</code></pre> <p>It means that you need to install the module named \"schedule\" in this case.</p> <p>To install it, run the following command:</p> <pre><code>(venv_MyBot) $ pip3 install schedule\nCollecting schedule  Using cached schedule-1.2.0-py2.py3-none-any.whl (11 kB)  \nInstalling collected packages: schedule  \nSuccessfully installed schedule-1.2.0  \nWARNING: You are using pip version 22.0.4; however, version 23.1.2 is available.  \nYou should consider upgrading via the '/home/user1/.pyenv/versions/3.10.4/envs/MyBot/bin/python3.10 -m pip install --upgrade pip' command.\n</code></pre> <p>Then, retry running the script, and rinse and repeat until it works. Once it does, run the following command:</p> <pre><code>(venv_MyBot) $ pip3 freeze &gt; requirements.txt\n</code></pre> <p>While not mandatory, this will make you able to reinstall the script with a single command the next time.</p> <p>The command to install from the requirements.txt is, for information (don't need to run this now, since everything is already installed):</p> <pre><code>(venv_MyBot) $ pip3 install -r requirements.txt\n</code></pre>"},{"location":"Tutorials/Hosting%20a%20python%20bot%20on%20a%20VPS/#running-the-script-in-background","title":"Running the script in background","text":"<p>Warning</p> <p>Make sure that you have activated the virtual env before running the command below, especially after connecting in a new session. </p> <p>While the script is running good when you start it manually, it will stop when you close your terminal, which we do not want.</p> <p>To be able to keep the script running when you leave the server, you will need to use the nohup command.</p> <pre><code>(venv_MyBot) $ nohup python3 ./main.py &gt; output.log 2&gt;&amp;1 &amp;\n</code></pre> <p>The command above uses nohup to tell the shell to run the command in a separate process, and redirects its output to a log file named output.log, that you can read to see if everything is working as intended, or if any error was generated.</p> <p>After running the command, you can directly press \"Enter\" to check if it didn't instantly fail for some reason. Most of the time, it fails because you forgot to activate the python virtual environment.</p>"}]}